@page "/"

<PageTitle>Products</PageTitle>
@using MyOrderCart.BlazorUI.Services
@using MyOrderCart.Domain.Entities
@using MyOrderCart.Application.Interfaces
@using MyOrderCart.Application.DTOs
@inject IProductService ProductApiService
@inject CartService CartService

<h3>Product List</h3>

@if (products == null)
{
    <p>
        <em>Loading products...</em>
    </p>
}
else if (!products.Any())
{
    <p>No products found.</p>
}
else
{
    <input type="text"
           class="form-control"
           placeholder="Search by title..."
           @bind="searchTerm"
           @bind:event="oninput" />
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Price</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in FilteredProducts)
            {
                <tr>
                    <td>@product.Title</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>
                        @if (CartService.Items.Any(i => i.Product.Id == product.Id))
                        {
                            var item = CartService.Items.First(i => i.Product.Id == product.Id);

                            @if (item.Quantity == 1)
                            {
                                <button class="btn btn-sm btn-outline-danger me-1"
                                        @onclick="() => RemoveFromCart(product.Id)">
                                    🗑️
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-outline-primary me-1"
                                        @onclick="() => Decrement(product.Id)">
                                    -
                                </button>
                            }

                            <span class="px-2 align-self-center">@item.Quantity</span>

                            <button class="btn btn-sm btn-outline-primary ms-1"
                                    @onclick="() => AddToCart(product)">
                                +
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-primary"
                                    @onclick="() => AddToCart(product)">
                                +
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ProductDto>? products;
    private string searchTerm = string.Empty;
    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        products = await ProductApiService.GetProductsAsync();
    }

    private void AddToCart(ProductDto dto)
    {
        Console.WriteLine($"Added: {dto.Title}");
        var product = new Product
            {
                Id = dto.Id,
                Title = dto.Title,
                Price = dto.Price,
            };
        CartService.AddProduct(product);
    }

    private void RemoveFromCart(int productId)
    {
        CartService.RemoveProduct(productId);
    }

    private void Decrement(int productId)
    {
        CartService.DecrementProduct(productId);
    }

  

    private IEnumerable<ProductDto>? FilteredProducts =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? products
            : products.Where(p => p.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
}